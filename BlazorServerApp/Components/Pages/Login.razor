@page "/"
@using GrpcService
@using GrpcService.Services
@inherits LayoutComponentBase
@inject UserClient UserClient
@inject NavigationManager Navigation
@rendermode InteractiveServer

<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="Login.css" />
</head>

<header class="text-center mb-4">
    <h1 class="heading">Unrecorded Chat</h1>
    <h3 class="title">Login & Sign Up</h3>
</header>

<div class="container">
    <!-- Slider -->
    <div class="slider" style="transform: @SliderPosition;"></div>

    <!-- Buttons -->
    <div class="btn-container">
        <div class="btn-tab" @onclick="ShowLogin">Login</div>
        <div class="btn-tab" @onclick="ShowSignup">Signup</div>
    </div>

    <!-- Form Section -->
    <div class="form-section" style="transform: @FormPosition;">
        <!-- Login Form -->
        <div class="form-container">
            <h2>Login</h2>
            <input type="email" class="form-control mb-3" placeholder="Username/Email" @bind="loginEmail" />
            <input type="password" class="form-control mb-3" placeholder="Password" @bind="loginPassword" />
            <button class="btn-submit w-100" @onclick="HandleLogin">Login</button>
            @if (!string.IsNullOrEmpty(errorMessage) && !isSignup)
            {
                <div class="alert alert-danger mt-3">@errorMessage</div>
            }
        </div>

        <!-- Signup Form -->
        <div class="form-container">
            <h2>Signup</h2>
            <input type="text" class="form-control mb-3" placeholder="Your Name" @bind="signupName" />
            <input type="email" class="form-control mb-3" placeholder="Email" @bind="signupEmail" />
            <input type="password" class="form-control mb-3" placeholder="Password" @bind="signupPassword" />
            <input type="password" class="form-control mb-3" placeholder="Confirm Password" @bind="signupConfirmPassword" />
            <button class="btn-submit w-100" @onclick="HandleSignup">Signup</button>
            @if (!string.IsNullOrEmpty(errorMessage) && isSignup)
            {
                <div class="alert alert-danger mt-3">@errorMessage</div>
            }
        </div>
    </div>
</div>

@code {
    private bool isSignup = false;

    private string loginEmail, loginPassword;
    private string signupName, signupEmail, signupPassword, signupConfirmPassword;
    private string errorMessage;

    // Dynamic styles
    private string SliderPosition => isSignup ? "translateX(100%)" : "translateX(0)";
    private string FormPosition => isSignup ? "translateX(-50%)" : "translateX(0)";

    private void ShowLogin()
    {
        isSignup = false;
        errorMessage = string.Empty; // Clear error message when switching forms
    }

    private void ShowSignup()
    {
        isSignup = true;
        errorMessage = string.Empty; // Clear error message when switching forms
    }

    private async Task HandleLogin()
    {
        if (UserClient == null)
        {
            errorMessage = "UserClient is not initialized.";
            return;
        }

        if (string.IsNullOrEmpty(loginEmail) || string.IsNullOrEmpty(loginPassword))
        {
            errorMessage = "Email and Password are required.";
            return;
        }

        try
        {
            if (loginEmail.Contains("@"))
            {
                await UserClient.LoginUserByEmailAsync(loginEmail, loginPassword);
            }
            else
            {
                await UserClient.LoginUserAsync(loginEmail, loginPassword);
            }

            // Navigate to the main layout after successful login
            Navigation.NavigateTo("/main");
        }
        catch (Grpc.Core.RpcException ex)
        {
            errorMessage = $"Error logging in: {ex.Status.Detail}";
        }
        catch (Exception ex)
        {
            errorMessage = $"An unexpected error occurred: {ex.Message}";
        }
    }

    private async Task HandleSignup()
    {
        if (string.IsNullOrEmpty(signupName) || string.IsNullOrEmpty(signupEmail) || string.IsNullOrEmpty(signupPassword) || string.IsNullOrEmpty(signupConfirmPassword))
        {
            errorMessage = "All fields are required.";
            return;
        }

        var user = new UserEntity
        {
            Username = signupName,
            Email = signupEmail,
            PassHash = signupPassword
        };

        try
        {
            await UserClient.CreateUserAsync(user);
            errorMessage = string.Empty; // Clear error message on successful signup
        }
        catch (Grpc.Core.RpcException ex)
        {
            errorMessage = $"Error creating user: {ex.Status.Detail}";
        }
        catch (Exception ex)
        {
            errorMessage = $"An unexpected error occurred: {ex.Message}";
        }
    }
}